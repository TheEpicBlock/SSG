plugins {
	id 'fabric-loom' version '0.6-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
}

// SNIPPET "gradle dependencies"
dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
	// You may need to force-disable transitiveness on them.
}
// ENDSNIPPET

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"

	// The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
	// JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
	// We'll use that if it's available, but otherwise we'll use the older option.
	def targetVersion = 8
	if (JavaVersion.current().isJava9Compatible()) {
		 it.options.release = targetVersion
	}
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

import net.fabricmc.loom.LoomGradleExtension
import net.fabricmc.loom.task.AbstractLoomTask
import net.fabricmc.loom.configuration.providers.mappings.MappingsProvider
import net.fabricmc.loom.util.SourceRemapper;
import net.fabricmc.mapping.tree.TinyTree;
import org.cadixdev.lorenz.MappingSet;
import org.cadixdev.mercury.Mercury;
import org.cadixdev.mercury.remapper.MercuryRemapper;
import net.fabricmc.lorenztiny.TinyMappingsReader;
import java.nio.file.Files;

abstract class IntermediaryTask extends AbstractLoomTask {
	private java.nio.file.Path inputDir = getProject().file("src/main/java").toPath();
	private java.nio.file.Path outputDir = getProject().file("intermediarySrc").toPath();

	@Option(option = "input", description = "Java source file directory")
	public void setInputDir(String inputDir) {
		this.inputDir = getProject().file(inputDir).toPath();
	}

	@Option(option = "output", description = "Remapped source output directory")
	public void setOutputDir(String outputDir) {
		this.outputDir = getProject().file(outputDir).toPath();
	}

	@TaskAction
	def main() {
		if (!Files.exists(inputDir) || !Files.isDirectory(inputDir)) {
			throw new IllegalArgumentException("Could not find input directory: " + inputDir.toAbsolutePath());
		}

		Project project = getProject();
		println ':loading mappings'
		LoomGradleExtension extension = getExtension()
		MappingsProvider mappingsProvider = extension.getMappingsProvider()
		TinyTree currentMappings = mappingsProvider.getMappings()
		println ':remapping'
		Mercury mercury = SourceRemapper.createMercuryWithClassPath(project, false)

		final JavaPluginConvention convention = project.getConvention().findPlugin(JavaPluginConvention.class)
		final JavaVersion javaVersion = convention != null
				?
				convention.getSourceCompatibility()
				:
				JavaVersion.current();
		mercury.setSourceCompatibility(javaVersion.toString())

		mercury.getClassPath().add(extension.getMinecraftMappedProvider().getMappedJar().toPath())
		mercury.getClassPath().add(extension.getMinecraftMappedProvider().getIntermediaryJar().toPath())

		MappingSet mappings = new TinyMappingsReader(currentMappings, "named", "intermediary").read()

		mercury.getProcessors().add(MercuryRemapper.create(mappings))

		try {
			mercury.rewrite(inputDir, outputDir);
		} catch (Exception e) {
			project.getLogger().warn("Could not remap: ", e);
		}
	}
}

// Create a task using the task type
tasks.register('toIntermediary', IntermediaryTask)